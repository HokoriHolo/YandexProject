import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.methods import DeleteWebhook
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import requests
from collections import defaultdict
from datetime import datetime, time
import pytz

TOKEN = '7826734862:AAFkDgHXtQKgoFY8FV2An2wti46GoRZp2GA'

logging.basicConfig(level=logging.INFO)
bot = Bot(TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_id: list[messages])
user_dialogs = defaultdict(list)

# –•—Ä–∞–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: {'city': str, 'time': time})
weather_subscriptions = defaultdict(dict)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class WeatherStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_time = State()


# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_dialogs[user_id] = [  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        {"role": "system", "content": "You are a helpful assistant."}
    ]

    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üí¨ –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"))
    builder.add(KeyboardButton(text="‚õÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã"))
    builder.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã"))

    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.\n'
        '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode='HTML'
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞
@dp.message(F.text == "üí¨ –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
async def handle_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_dialogs:
        user_dialogs[user_id] = [
            {"role": "system", "content": "You are a helpful assistant."}
        ]
    await message.answer("–†–µ–∂–∏–º —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã
@dp.message(F.text == "‚õÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã")
async def setup_weather_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≥–æ–¥—ã:")
    await state.set_state(WeatherStates.waiting_for_city)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@dp.message(WeatherStates.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00), –∫–æ–≥–¥–∞ –≤–∞–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥—É:")
    await state.set_state(WeatherStates.waiting_for_time)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
@dp.message(WeatherStates.waiting_for_time)
async def process_time(message: types.Message, state: FSMContext):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è
        time_str = message.text
        hours, minutes = map(int, time_str.split(':'))
        if hours < 0 or hours > 23 or minutes < 0 or minutes > 59:
            raise ValueError

        user_data = await state.get_data()
        city = user_data['city']
        user_id = message.from_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        weather_subscriptions[user_id] = {
            'city': city,
            'time': time(hour=hours, minute=minutes)
        }

        await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n–ì–æ—Ä–æ–¥: {city}\n–í—Ä–µ–º—è: {time_str}")
        await state.clear()

    except (ValueError, IndexError):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00):")


# –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã")
async def cancel_weather_subscription(message: types.Message):
    user_id = message.from_user.id
    if user_id in weather_subscriptions:
        del weather_subscriptions[user_id]
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–≥–æ–¥—É.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
async def get_weather(city: str) -> str:
    try:
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenWeatherMap API (–Ω—É–∂–µ–Ω API –∫–ª—é—á)
        API_KEY = "58eea590dd60f4c8a4930a9803ece65f"
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"

        response = requests.get(url)
        data = response.json()

        if data.get('cod') != 200:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."

        weather = data['weather'][0]['description']
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        humidity = data['main']['humidity']

        return (f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                f"‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%")

    except Exception as e:
        logging.error(f"Error getting weather: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}"


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã
async def check_weather_schedule():
    while True:
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

        try:
            moscow_tz = pytz.timezone('Europe/Moscow')
            now = datetime.now(moscow_tz)
            current_time = now.time()

            for user_id, sub in weather_subscriptions.items():
                if 'time' in sub:
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
                    if current_time.hour == sub['time'].hour and current_time.minute == sub['time'].minute:
                        city = sub['city']
                        weather = await get_weather(city)
                        await bot.send_message(user_id, weather)
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É
                        await asyncio.sleep(60)

        except Exception as e:
            logging.error(f"Error in weather scheduler: {e}")
            await asyncio.sleep(60)  # –ü–æ–¥–æ–∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º)
@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
    if not message.text or message.text in ["‚õÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã"]:
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if user_id not in user_dialogs:
        user_dialogs[user_id] = [
            {"role": "system", "content": "You are a helpful assistant."}
        ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_dialogs[user_id].append({"role": "user", "content": message.text})

    url = "https://api.intelligence.io.solutions/api/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9."
                         "eyJvd25lciI6IjlkYmNiZjJkLWJjODAtNDA3Ni04YzUwLTkwNGEwYThhM2QwMyIsImV4cCI6NDkwMDQwNjM5MH0."
                         "Jc1hn20jAAijksR3i6Fj9BXhlKompahEAoSMkwMumZMsLZacs5iU0_LBnT19StlOKXEDFbctyygz5RK_9Agmyg",
    }

    data = {
        "model": "deepseek-ai/DeepSeek-R1",
        "messages": user_dialogs[user_id],  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    }

    response = requests.post(url, headers=headers, json=data)
    data = response.json()

    if 'choices' in data and data['choices']:
        bot_response = data['choices'][0]['message']['content']
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ, –µ—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç <think>...</think>
        if '</think>' in bot_response:
            bot_response = bot_response.split('</think>\n\n')[1]

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_dialogs[user_id].append({"role": "assistant", "content": bot_response})
        await message.answer(bot_response, parse_mode="Markdown")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def on_startup():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    asyncio.create_task(check_weather_schedule())


async def main():
    await bot(DeleteWebhook(drop_pending_updates=True))
    await on_startup()  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())